version: "3.9"

x-environment: &environment-shared
  DB_NAME: ${DB_NAME}
  DB_USER: ${DB_USER}
  DB_PASSWORD: ${DB_PASSWORD}
  DB_HOST: ${DB_HOST}
  DEBUG: ${DEBUG}
  SECRET_KEY: ${SECRET_KEY}
#  VK_OAUTH2_KEY: ${VK_OAUTH2_KEY}
#  VK_OAUTH2_SECRET: ${VK_OAUTH2_SECRET}
#  BOT_TOKEN: ${BOT_TOKEN}


services:
  front:
    image: sermalenk/skypro-front:lesson-35
    restart: always
    ports:
      - '80:80'
    depends_on:
      api:
        condition: service_healthy
    networks:
      - front_nw


  api:
    image: alexrazek/todolist_alex:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
#    environment: *environment-shared
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
#      migrations:
#        condition: service_completed_successfully
    command: >
      sh -c "python3 manage.py makemigrations core &&
             python3 manage.py migrate &&
             python3 manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: curl -sS http://127.0.0.1:8000/health/ || exit 1
      interval: 3s
      timeout: 3s
      retries: 3
    networks:
      - backend_nw
      - front_nw

  migrations:
    image: alexrazek/todolist_alex:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment: *environment-shared
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "python3 manage.py migrate"
    networks:
      - backend_nw

#  bot:
#    image: alexrazek/todolist_alex:$GITHUB_REF_NAME-$GITHUB_RUN_ID
#    environment: *environment-shared
#    restart: always
#    depends_on:
#      postgres:
#        condition: service_healthy
#      migrations:
#        condition: service_completed_successfully
#    command: >
#      sh -c "python3 manage.py runbot"
#    networks:
#      - backend_nw
#      - front_nw


  postgres:
    image: postgres:14.0-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_DB: $DB_NAME
      POSTGRES_USER: $DB_USER
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - backend_nw

volumes:
    postgres-data:

networks:
  backend_nw:
    driver: bridge
  front_nw:
    driver: bridge