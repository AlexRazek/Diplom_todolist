version: "3.9"

x-environment: &environment-shared
  POSTGRES_DB: ${POSTGRES_DB}
  POSTGRES_USER: $POSTGRES_USER
  POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  POSTGRES_HOST: postgres
  DEBUG: False
  SECRET_KEY: ${SECRET_KEY}
  VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
  VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
#  BOT_TOKEN: ${BOT_TOKEN}


services:

  postgres:
    image: postgres:13.0-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - backend_nw


  frontend:
    image: sermalenk/skypro-front:lesson_37
    restart: always
    ports:
      - '80:80'
    depends_on:
      - api
#        condition: service_healthy
    networks:
      - frontend_nw


  api:
    image: alexrazek/todolist_alex:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
#    environment: *environment-shared
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
#      migrations:
#        condition: service_completed_successfully
    command: >
      sh -c "python3 manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: curl -sS http://127.0.0.1:8000/health/ || exit 1
      interval: 15s
      timeout: 5s
      retries: 3
    networks:
      - backend_nw
      - frontend_nw


volumes:
    postgres-data:

networks:
  backend_nw:
    driver: bridge
  frontend_nw:
    driver: bridge