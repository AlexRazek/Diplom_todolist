version: "3.9"

services:

  api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      POSTGRES_HOST: 127.0.0.1
    restart: always
    depends_on:
      postgres:
        condition: service_healthy #просто порядок запуска
    ports:
      - "8000:8000"
    healthcheck:
      test: curl -sS http://127.0.0.1:8000/health/ || exit 1
      interval: 3s
      timeout: 3s
      retries: 3


  postgres:
    image: postgres:13.0-alpine #postgres:latest  #13.0-alpine #postgres:14-alpine
    restart: always
    env_file:
      - ./.env
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgres #$DB_PASSWORD
      POSTGRES_DB: postgres #$DB_NAME
      POSTGRES_USER: postgres #$DB_USER
      POSTGRES_HOST: 127.0.0.1 #$DB_HOST
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5



  front:
    image: sermalenk/skypro-front:lesson_35
    build:
      dockerfile: docker/Dockerfile
      context: front
    restart: always
    ports:
      - "80:80"
#    depends_on:
#      api:
#        condition: service_healthy


volumes:
    postgres-data:



#  bot:
#    build:
#      context: .
#    depends_on:
#      postgres:
#        condition: service_healthy #просто порядок запуска
#      migrations:
#        condition: service_completed_successfully #запустить после того как успешно завкершитья другой контейнер
#    volumes:
#      - ./.docker_env:/app/.env
#    command: python manage.py runbot




