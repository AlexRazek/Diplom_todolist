version: "3.9"

services:
  front:
    build:
      dockerfile: docker/Dockerfile
      context: front
    ports:
      - 8034:80
    depends_on:
      - api
  api:
    build:
      context: .
    ports:
      - 8000:8000
    depends_on:
      postgres:
        condition: service_healthy #просто порядок запуска
      migrations:
        condition: service_completed_successfully #запустить после того как успешно завершитcя другой контейнер
    volumes:
      - ./.docker_env:/app/.env
  migrations:
    build:
      context: .
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./.docker_env:/app/.env
    command: python manage.py migrate
  postgres:
    image: 13.7-alpine    #postgres:latest  #13.0-alpine
    env_file:
      - ./.env
    environment:
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_DB: $DB_NAME
      POSTGRES_USER: $DB_USER
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
volumes:
    postgres-data:




#  bot:
#    build:
#      context: .
#    depends_on:
#      postgres:
#        condition: service_healthy #просто порядок запуска
#      migrations:
#        condition: service_completed_successfully #запустить после того как успешно завкершитья другой контейнер
#    volumes:
#      - ./.docker_env:/app/.env
#    command: python manage.py runbot




