version: "3.9"

services:

  frontend:
    image: sermalenk/skypro-front:lesson_38
    restart: always
    ports:
      - "8080:80"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - frontend_nw
    volumes:
      - .:/app

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      POSTGRES_HOST: postgres
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "python3 manage.py runbot"
    volumes:
      - .:/app
    networks:
      - backend_nw
      - frontend_nw

  api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      POSTGRES_HOST: postgres
    restart: always
    depends_on:
      postgres:
        condition: service_healthy #просто порядок запуска
    command: >
      sh -c "python3 manage.py migrate &&
            python3 manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    healthcheck:
      test: curl -sS http://127.0.0.1:8000/health/ || exit 1
      interval: 3s
      timeout: 3s
      retries: 3
    volumes:
      - .:/app
    networks:
      - backend_nw
      - frontend_nw

  postgres:
    image: postgres:13.0-alpine
    restart: always
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_nw

volumes:
  postgres-data:

networks:
  backend_nw:
    driver: bridge
  frontend_nw:
    driver: bridge

